var O=Object.defineProperty;var o=(r,e)=>O(r,"name",{value:e,configurable:!0});import _ from"@mongodb-js/zstd";import{COMPRESSIBLE_CONTENT_TYPE_REGEX as N}from"hono/utils/compress";const A="Cloudflare-Workers",C=["zstd","br","gzip","deflate"],y=/(?:^|,)\s*?no-transform\s*?(?:,|$)/i,z=1024,I=3,P=11,k=6,q=globalThis.navigator?.userAgent===A,v=globalThis.Deno?.env?.get("DENO_DEPLOYMENT_ID")!==void 0;function B(r){const e=r.headers.get("Content-Type");return e&&N.test(e)}o(B,"shouldCompress");function G(r){const e=r.headers.get("Cache-Control");return!e||!y.test(e)}o(G,"shouldTransform");const Z=import("brotli-wasm");let b;Z.then(r=>{b=r});const H=import("node:zlib");let l;H.then(r=>{l=r}).catch(null);class g extends TransformStream{static{o(this,"ZstdCompressionStream")}constructor(e){super({async transform(s,t){t.enqueue(await _.compress(s,e))}})}}class w extends TransformStream{static{o(this,"BrotliCompressionStream")}constructor(e){const s=new b.CompressStream(e);super({transform(t,a){a.enqueue(s.compress(t,t.length).buf)}})}}class S{static{o(this,"ZlibCompressionStream")}readable;writable;constructor(e,s){let t;switch(e){case"br":{t=l.createBrotliCompress(s);break}case"gzip":{t=l.createGzip(s);break}case"deflate":{t=l.createDeflate(s);break}default:t=l.createDeflateRaw(s)}this.readable=new ReadableStream({async start(a){for await(const u of t.iterator())a.enqueue(u);a.close()}}),this.writable=new WritableStream({write:o(a=>t.write(a),"write"),close:o(()=>t.end(),"close")})}}const T=o(({encoding:r,encodings:e=[...C],options:s={},threshold:t=z,zstdLevel:a=I,brotliLevel:u=P,zlibLevel:L=k,filter:d}={})=>{r&&(e=[r]),s={...s,level:L};const m=e.find(f=>!C.includes(f));if(m)throw new Error(`Invalid compression encoding: ${m}`);return o(async function(n,R){await R();let E=n.res.body;if(!E||n.req.method==="HEAD"||n.res.headers.has("Content-Encoding"))return;const h=n.req.header("Accept-Encoding");if(!h)return;const i=e.find(D=>h.includes(D));if(!i)return;let p=Number(n.res.headers.get("Content-Length"));if(p&&p<t||!B(n.res)||!G(n.res))return;if(d!=null){if(!d(n))return}else if(v||q)return;let c;i==="zstd"?c=new g(a):l?c=new S(i,s):i==="br"?c=new w(u):c=new CompressionStream(i),n.res=new Response(E.pipeThrough(c),n.res),n.res.headers.delete("Content-Length"),n.res.headers.set("Content-Encoding",i)},"compress2")},"compress");export{w as BrotliCompressionStream,S as ZlibCompressionStream,g as ZstdCompressionStream,T as compress,T as default};
