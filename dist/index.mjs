var O=Object.defineProperty;var o=(r,e)=>O(r,"name",{value:e,configurable:!0});import _ from"@mongodb-js/zstd";import{COMPRESSIBLE_CONTENT_TYPE_REGEX as N}from"hono/utils/compress";const A="Cloudflare-Workers",b=["zstd","br","gzip","deflate"],y=/(?:^|,)\s*?no-transform\s*?(?:,|$)/i,z=1024,I=2,P=11,k=6,q=globalThis.navigator?.userAgent===A,v=globalThis.Deno?.env?.get("DENO_DEPLOYMENT_ID")!==void 0;function B(r){const e=r.headers.get("Content-Type");return e&&N.test(e)}o(B,"shouldCompress");function G(r){const e=r.headers.get("Cache-Control");return!e||!y.test(e)}o(G,"shouldTransform");const Z=import("brotli-wasm");let g;Z.then(r=>{g=r});const H=import("node:zlib");let l;H.then(r=>{l=r}).catch(null);class w extends TransformStream{static{o(this,"ZstdCompressionStream")}constructor(e){super({async transform(n,t){t.enqueue(await _.compress(n,e))}})}}class S extends TransformStream{static{o(this,"BrotliCompressionStream")}constructor(e){const n=new g.CompressStream(e);super({transform(t,a){a.enqueue(n.compress(t,t.length).buf)}})}}class T{static{o(this,"ZlibCompressionStream")}readable;writable;constructor(e,n){let t;switch(e){case"br":{t=l.createBrotliCompress(n);break}case"gzip":{t=l.createGzip(n);break}case"deflate":{t=l.createDeflate(n);break}default:t=l.createDeflateRaw(n)}this.readable=new ReadableStream({async start(a){for await(const u of t.iterator())a.enqueue(u);a.close()}}),this.writable=new WritableStream({write:o(a=>t.write(a),"write"),close:o(()=>t.end(),"close")})}}const L=o(({encoding:r,encodings:e=[...b],threshold:n=z,zstdLevel:t=I,brotliLevel:a=P,zlibLevel:u=k,options:d={},filter:m}={})=>{r&&(e=[r]),d={...d,level:u};const f=e.find(E=>!b.includes(E));if(f)throw new Error(`Invalid compression encoding: ${f}`);return o(async function(s,R){await R();let h=s.res.body;if(!h||s.req.method==="HEAD"||s.res.headers.has("Content-Encoding"))return;const p=s.req.header("Accept-Encoding");if(!p)return;const i=e.find(D=>p.includes(D));if(!i)return;let C=Number(s.res.headers.get("Content-Length"));if(C&&C<n||!B(s.res)||!G(s.res))return;if(m!=null){if(!m(s))return}else if(v||q)return;let c;i==="zstd"?c=new w(t):l?c=new T(i,d):i==="br"?c=new S(a):c=new CompressionStream(i),s.res=new Response(h.pipeThrough(c),s.res),s.res.headers.delete("Content-Length"),s.res.headers.set("Content-Encoding",i)},"compress2")},"compress");export{S as BrotliCompressionStream,T as ZlibCompressionStream,w as ZstdCompressionStream,L as compress,L as default};
