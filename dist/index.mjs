var w=Object.defineProperty;var a=(n,e)=>w(n,"name",{value:e,configurable:!0});import{createDeflateRaw as R,createDeflate as N,createGzip as T,createBrotliCompress as O}from"node:zlib";import{compress as S}from"@mongodb-js/zstd";import{COMPRESSIBLE_CONTENT_TYPE_REGEX as A}from"hono/utils/compress";class p{static{a(this,"NodeCompressionStream")}readable;writable;constructor(e,i){let t;switch(e){case"br":{t=O(i);break}case"gzip":{t=T(i);break}case"deflate":{t=N(i);break}default:t=R(i)}this.readable=new ReadableStream({start(s){t.on("data",c=>s.enqueue(c)),t.once("end",()=>s.close())}}),this.writable=new WritableStream({write:a(s=>t.write(s),"write"),close:a(()=>t.end(),"close")})}}const D="Cloudflare-Workers",_=["gzip","deflate"],C=["zstd","br","gzip","deflate"],y=/(?:^|,)\s*?no-transform\s*?(?:,|$)/i,L=!!process.versions.bun,B=globalThis.navigator?.userAgent===D,k=!!globalThis.Deno;function z(n){const e=n.headers.get("Content-Type");return e&&A.test(e)}a(z,"shouldCompress");function G(n){const e=n.headers.get("Cache-Control");return!e||!y.test(e)}a(G,"shouldTransform");async function I(n,e){const[i,t]=n.tee();let s=0;for await(const c of i)if(s+=c.length,s>=e)break;return{stream:t,length:s}}a(I,"readContentLength");const E=a(({encoding:n,encodings:e=[...C],options:i={},threshold:t=1024,zstdLevel:s=3}={})=>{n&&(e=[n]);const c=e.find(h=>!C.includes(h));if(c)throw new Error(`Invalid compression encoding: ${c}`);return a(async function(r,g){await g();let f=r.res.body;if(!f||r.req.method==="HEAD"||r.res.headers.has("Content-Encoding")||k||B||!z(r.res)||!G(r.res))return;const m=r.req.header("Accept-Encoding");if(!m)return;const d=e.find(o=>m.includes(o));if(!d)return;let l=Number(r.res.headers.get("Content-Length"));if(!l){const{stream:o,length:b}=await I(f,t);f=o,l=b}if(l<t)return;let u;if(d==="zstd"){const o=Buffer.from(await r.req.arrayBuffer());u=await S(o,s)}else{let o;!L&&_.includes(d)?o=new CompressionStream(d):o=new p(d,i),u=f.pipeThrough(o)}r.res=new Response(u,r.res),r.res.headers.delete("Content-Length"),r.res.headers.set("Content-Encoding",d)},"compress2")},"compress");export{p as NodeCompressionStream,E as compress,E as default};
